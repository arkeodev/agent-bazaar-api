services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    # -------- replace with comment to run with gunicorn --------
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    # command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true

    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src/app:/code/app
      - ./src/.env:/code/.env

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    command: streamlit run src/app/streamlit/main.py --server.port 8501 --server.address 0.0.0.0
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true
      - PYTHONPATH=/code/src
    ports:
      - "8501:8501"
    depends_on:
      - web
    volumes:
      - ./src:/code/src
      - ./src/.env:/code/.env

  db:
    image: postgres:13
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true
    volumes:
      - postgres-data:/var/lib/postgresql/data

    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5      


  #-------- uncomment to create first superuser --------
  # create_superuser:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./src/.env
  #   depends_on:
  #     - db
  #     - web
  #   command: python -m src.scripts.create_first_superuser
  #   volumes:
  #     - ./src:/code/src

  #-------- uncomment to run tests --------
  pytest:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./src/.env
    depends_on:
      - db
    command: pytest /code/tests/
    volumes:
      - ./tests:/code/tests
      - ./src:/code/src
      - ./src/.env:/code/.env

volumes:
  postgres-data:

