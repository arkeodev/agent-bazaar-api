services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true
      - SERVICE_TYPE=web
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/code/src
      - ./src/.env:/code/.env
      - /var/run/docker.sock:/var/run/docker.sock

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    command: streamlit run app/streamlit/main.py --server.port 8501 --server.address 0.0.0.0
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true
      - SERVICE_TYPE=streamlit
      - PYTHONPATH=/code/src
    ports:
      - "8501:8501"
    depends_on:
      - web
    volumes:
      - ./src:/code/src
      - ./src/.env:/code/.env
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    image: postgres:13
    env_file:
      - ./src/.env
    environment:
      - DOCKER_ENV=true
    volumes:
      - postgres-data:/var/lib/postgresql/data

    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5      

  pytest:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./src/.env
    depends_on:
      - db
    command: pytest /code/tests/
    volumes:
      - ./tests:/code/tests
      - ./src:/code/src
      - ./src/.env:/code/.env
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_ENV=true
      - SERVICE_TYPE=pytest

volumes:
  postgres-data:

